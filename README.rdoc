= asset_library

Bundles your JavaScript and CSS, so your development environment is simple to
code and your production environment is as fast as possible.

== Installation

First, install the gem:

  sudo gem install adamh-asset_library --source http://gems.github.com

Next, add the gem into your Rails project's config/environment.rb:

  config.gem 'adamh-asset_library', :lib => 'asset_library', :source => 'http://gems.github.com'

Finally, include the Rake tasks in your project:

  echo "require 'asset_library/rake_tasks'" > lib/tasks/asset_library.rake

== Usage

In your Rails project, edit <tt>config/asset_library.yml</tt> as described
in the following section.

Once configured, asset_library provides two helper methods for your views:

  <%# outputs library.js (production) or its files (development) %>
  <%= asset_library_javascript_tags(:javascripts) %>

  <%# outputs library.css (production) or its files (development) %>
  <%= asset_library_stylesheet_tags(:stylesheets) %>

  <%# outputs library.ie6.css (production) or its files (development) %>
  <!--[if lte IE 6]>
    <%= asset_library_stylesheet_tags(:stylesheets, 'ie6') %>
  <![endif]-->

Both helpers behave differently depending on whether
<tt>ActionController::Base.perform_caching</tt> is true (that is, whether you
are in <tt>development</tt> environment or not). When caching is disabled, each
file in the module will be included. (Internet Explorer only allows 30
<tt>style</tt> and <tt>link</tt> stylesheet tags; in development mode,
<tt>import</tt> rules are used to work around the bug.) When caching is
enabled, a single tag is output.

When caching is enabled, the modules to include must be generated using:

  rake asset_library:write

These moduels can be removed using:

  rake asset_library:clean

A cached module is simply the concatenation of its constituent files.

== Configuration

A typical configuration (Yaml) file might look like this. In Rails, this
should be in <tt>config/asset_library.yml</tt>.

  javascripts:
    cache: library
    optional_suffix: compressed
    base: javascripts
    suffix: js
    files:
      - vendor/jquery

      # jQuery UI parts we need
      - vendor/jquery-ui/ui.core
      - vendor/jquery-ui/ui.draggable
      - vendor/jquery-ui/ui.droppable
      - vendor/jquery-ui/ui.sortable
      - vendor/jquery-ui/effects.core

      - lib
      - plugins/*
      - application
      - initializers/*

  tiny_mce_javascripts:
    # TinyMCE doesn't give us a choice on cache name
    cache: vendor/tiny_mce/tiny_mce_gzip
    optional_suffix: compressed
    base: javascripts
    suffix: js
    files:
      - vendor/tiny_mce/tiny_mce
      # ... it's possible to bundle all of TinyMCE together with a bit of magic

  stylesheets:
    cache: library
    base: stylesheets
    suffix: css
    extra_suffixes: [ie6, ie7, ie8]
    files:
      - reset
      - application
      - layout
      - views/**/*

  # in general...
  #module_name:
  #  cache: cache_file
  #  base: base_path_of_assets_in_web_root
  #  suffix: suffix ("css" or "js")
  #  extra_suffixes: ["other_bundle_suffix_1", "other_bundle_suffix_2"]
  #  optional_suffix: optional_suffix
  #  files:
  #    - file1_relative_to_base
  #    - file2_relative_to_base
  #    - ...

Here are what the various configuration elements mean:

<tt>module_name</tt> is the name of the module. It is passed as the first
parameter to <tt>asset_library_javascript_tags</tt> or
<tt>asset_library_stylesheet_tags</tt>.

<tt>cache</tt> is a filename, without suffix, relative to <tt>base</tt>, where
the module will be bundled when caching is enabled. (Ensure that <tt>files</tt>
does not include <tt>cache_file</tt>, even with globbing.)

<tt>base</tt> is the base path of the assets in URLs. For instance, in Rails,
where stylesheets are usually served under <tt>/stylesheets</tt>, <tt>base</tt>
should be <tt>stylesheets</tt>.

<tt>suffix</tt> is either "js" or "css", depending on whether you are including
JavaScript or CSS files.

<tt>extra_suffixes</tt> allows construction of parallel modules. If you specify
<tt>extra_suffixes</tt> as ['ie6', 'ie7'], <tt>files</tt> as <tt>file1</tt> and
<tt>file2</tt>, <tt>module_name</tt> as <tt>module</tt>, and <tt>suffix</tt> as
<tt>css</tt>, then three modules will be created (ignoring nonexistent files):

* <tt>module.css</tt>, the concatenation of <tt>file1.css</tt> and <tt>file2.css</tt>
* <tt>module.ie6.css</tt>, the concatenation of <tt>file1.ie6.css</tt> and <tt>file2.ie6.css</tt>
* <tt>module.ie7.css</tt>, the concatenation of <tt>file1.ie7.css</tt> and <tt>file2.ie7.css</tt>

<tt>optional_suffix</tt> will cause asset_library to check for the existence of
files with <tt>optional_suffix</tt> suffixes, falling back to files without
<tt>optional_suffix</tt> if necessary. For instance, if you run all your
JavaScript files through
{YUI Compressor}[http://developer.yahoo.com/yui/compressor/] and output the
compressed version of <tt>file1.js</tt> as <tt>file1.compressed.js</tt>, then
set <tt>optional_suffix</tt> to <tt>compressed</tt>. In your development
environment, where <tt>compressed</tt> javascripts are missing,
<tt>file1.js</tt> will be included and you can debug your JavaScript. In your
production environment, create the <tt>compressed</tt> JavaScripts in the same
directory, and they will be included instead, for optimal download speed.

<tt>files</tt> is a list of files, relative to <tt>base</tt>. File globbing is
allowed; <tt>**</tt> expands to "any nesting of directories". Files which do
not exist will be excluded; globbing will include/exclude files with
<tt>extra_suffixes</tt> as appropriate; and files without
<tt>optional_suffix</tt> will not be output alongside files with the same name
endowed with the suffix.

== Copyright

I believe in software freedom, not any abomination thereof. This project is
released under the Public Domain, meaning I relinquish my copyright (to any
extend the law allows) and grant you all rights to use, modify, sell, or
otherwise take advantage of my software.

However, I do kindly request that, as a favor, you refrain from using my
software as part of an evil plan involving velociraptors and mind-controlling
robots (even though I would not be legally entitled to sue you for doing so). 
